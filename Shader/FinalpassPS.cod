//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBFinalpass
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//   float rb_radius;                   // Offset:   16 Size:     4
//   int rb_samplingCount;              // Offset:   20 Size:     4
//   float2 rb_center;                  // Offset:   24 Size:     8
//   float rb_mask_radius;              // Offset:   32 Size:     4
//   float3 rb_dummy;                   // Offset:   36 Size:    12 [unused]
//   float4 vn_color;                   // Offset:   48 Size:    16
//   float2 vn_center;                  // Offset:   64 Size:     8
//   float vn_intensity;                // Offset:   72 Size:     4
//   float vn_smoothness;               // Offset:   76 Size:     4
//   float vn_rounded;                  // Offset:   80 Size:     4
//   float vn_roundness;                // Offset:   84 Size:     4
//   float vn_iris;                     // Offset:   88 Size:     4
//   float vn_dummy;                    // Offset:   92 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sceneSampler                      sampler      NA          NA             s0      1 
// sceneTexture                      texture  float4          2d             t0      1 
// bloomTexture                      texture  float4          2d             t1      1 
// CBFinalpass                       cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r0.xyzw, v1.xyzw
resinfo_indexable(texture2d)(float,float,float,float) r2.xy, l(0), t0.xyzw
ilt r0.w, l(1), cb0[1].y
if_nz r0.w
  add r2.zw, -v2.xxxy, cb0[1].zzzw
  div r3.xy, cb0[1].xxxx, r2.xyxx
  mul r2.zw, r2.zzzw, r3.xxxy
  itof r0.w, cb0[1].y
  mov r3.xyz, r1.xyzx
  mov r3.w, l(1)
  loop 
    ige r4.x, r3.w, cb0[1].y
    breakc_nz r4.x
    itof r4.x, r3.w
    div r4.x, r4.x, r0.w
    mad r4.xy, r2.zwzz, r4.xxxx, v2.xyxx
    sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0
    add r3.xyz, r3.xyzx, r4.xyzx
    iadd r3.w, r3.w, l(1)
  endloop 
  div r3.xyz, r3.xyzx, r0.wwww
  min r0.w, r2.y, r2.x
  div r0.w, cb0[2].x, r0.w
  add r2.zw, v2.xxxy, -cb0[1].zzzw
  dp2 r2.z, r2.zwzz, r2.zwzz
  sqrt r2.z, r2.z
  div_sat r0.w, r2.z, r0.w
  mad r0.xyz, -r0.xyzx, v1.xyzx, r3.xyzx
  mad r1.xyz, r0.wwww, r0.xyzx, r1.xyzx
endif 
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t1.xyzw, s0
add r0.xyz, r0.yzxy, r1.yzxy
max r0.w, r0.y, r0.x
max r0.w, r0.w, r0.z
min r1.x, r0.y, r0.x
min r1.x, r0.z, r1.x
add r1.x, r0.w, -r1.x
div r1.y, r1.x, r0.w
mul r1.z, r1.y, cb0[0].y
mul r3.y, r0.w, cb0[0].z
eq r2.z, r1.z, l(0.000000)
if_nz r2.z
  mov r4.xyz, r3.yyyy
else 
  lt r2.z, l(0.000000), r1.y
  eq r5.xyz, r0.zxyz, r0.wwww
  add r0.xyz, -r0.yzxy, r0.xyzx
  div r0.xyz, r0.xyzx, r1.xxxx
  mul r0.x, r0.x, l(60.000000)
  and r0.x, r0.x, r5.x
  mad r0.yz, r0.yyzy, l(0.000000, 60.000000, 60.000000, 0.000000), l(0.000000, 120.000000, 240.000000, 0.000000)
  movc r0.x, r5.y, r0.y, r0.x
  movc r0.x, r5.z, r0.z, r0.x
  lt r0.y, r0.x, l(0.000000)
  add r0.z, r0.x, l(360.000000)
  movc r0.x, r0.y, r0.z, r0.x
  and r0.x, r0.x, r2.z
  add r0.x, r0.x, cb0[0].x
  mul r0.y, r0.x, l(360.000000)
  ge r0.y, r0.y, -r0.y
  movc r0.yz, r0.yyyy, l(0,360.000000,0.002778,0), l(0,-360.000000,-0.002778,0)
  mul r0.x, r0.z, r0.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r0.y
  mul r0.y, r0.x, l(0.016667)
  round_z r0.y, r0.y
  mad r0.x, r0.x, l(0.016667), -r0.y
  mad r0.z, -r1.y, cb0[0].y, l(1.000000)
  mul r3.z, r0.z, r3.y
  mad r0.z, -r1.z, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  mad r0.x, -r1.z, r0.x, l(1.000000)
  mul r3.xw, r0.xxxz, r3.yyyy
  eq r5.xyzw, r0.yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
  eq r0.xy, r0.yyyy, l(4.000000, 5.000000, 0.000000, 0.000000)
  and r0.yzw, r3.yyzw, r0.yyyy
  movc r0.xyz, r0.xxxx, r3.xzyx, r0.yzwy
  movc r0.xyz, r5.wwww, r3.zwyz, r0.xyzx
  movc r0.xyz, r5.zzzz, r3.zyxz, r0.xyzx
  movc r0.xyz, r5.yyyy, r3.wyzw, r0.xyzx
  movc r4.xyz, r5.xxxx, r3.yxzy, r0.xyzx
endif 
lt r0.x, l(0.000000), cb0[4].z
lt r0.y, l(0.500000), cb0[5].z
add r1.yz, v2.xxyx, -cb0[4].xxyx
div r0.z, r2.x, r2.y
add r0.z, r0.z, l(-1.000000)
mad r0.z, cb0[5].x, r0.z, l(1.000000)
mul r1.x, r0.z, r1.y
mad r0.w, cb0[4].z, l(0.700000), l(0.300000)
add r2.x, -r0.w, cb0[4].z
mad r0.w, cb0[5].x, r2.x, r0.w
add r0.w, -r0.w, l(1.000000)
dp2 r1.x, r1.xzxx, r1.xzxx
sqrt r1.x, r1.x
ge r0.w, r1.x, r0.w
and r0.w, r0.w, l(0x3f800000)
add r2.xyz, cb0[3].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyz, r0.wwww, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r4.xyzx
mul r1.yz, |r1.zzyz|, cb0[4].zzzz
mul r1.x, r0.z, r1.z
mov_sat r1.xy, r1.xyxx
log r0.zw, r1.xxxy
mul r0.zw, r0.zzzw, cb0[5].yyyy
exp r0.zw, r0.zzzw
dp2 r0.z, r0.zwzz, r0.zwzz
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000000)
log r0.z, r0.z
mul r0.z, r0.z, cb0[4].w
exp r0.z, r0.z
add r1.xyz, -cb0[3].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, r0.zzzz, r1.xyzx, cb0[3].xyzx
mul r1.xyz, r1.xyzx, r4.xyzx
movc r0.yzw, r0.yyyy, r2.xxyz, r1.xxyz
movc o0.xyz, r0.xxxx, r0.yzwy, r4.xyzx
mov o0.w, r1.w
ret 
// Approximately 120 instruction slots used
