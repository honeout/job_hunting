//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float4 viewPosition;               // Offset:    0 Size:    16
//   row_major float4x4 viewProjection; // Offset:   16 Size:    64 [unused]
//   float4 ambientLightColor;          // Offset:   80 Size:    16
//   
//   struct DirectionalLightData
//   {
//       
//       float4 direction;              // Offset:   96
//       float4 color;                  // Offset:  112
//
//   } directionalLightData;            // Offset:   96 Size:    32
//   
//   struct PointLightData
//   {
//       
//       float4 position;               // Offset:  128
//       float4 color;                  // Offset:  144
//       float range;                   // Offset:  160
//       float3 dummy;                  // Offset:  164
//
//   } pointLightData[8];               // Offset:  128 Size:   384
//   
//   struct SpotLightData
//   {
//       
//       float4 position;               // Offset:  512
//       float4 direction;              // Offset:  528
//       float4 color;                  // Offset:  544
//       float range;                   // Offset:  560
//       float innerCorn;               // Offset:  564
//       float outerCorn;               // Offset:  568
//       float dummy;                   // Offset:  572
//
//   } spotLightData[8];                // Offset:  512 Size:   512
//   int pointLightCount;               // Offset: 1024 Size:     4
//   int spotLightCount;                // Offset: 1028 Size:     4
//   float2 colorGB;                    // Offset: 1032 Size:     8
//   int texcoordMult;                  // Offset: 1040 Size:     4 [unused]
//   int isSpecular;                    // Offset: 1044 Size:     4
//   int isRimLighting;                 // Offset: 1048 Size:     4
//   int StencilRef;                    // Offset: 1052 Size:     4 [unused]
//
// }
//
// cbuffer CbShadowmap
// {
//
//   row_major float4x4 lightViewProjection;// Offset:    0 Size:    64 [unused]
//   float3 shadowColor;                // Offset:   64 Size:    12
//   float shadowBias;                  // Offset:   76 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// shadowMapSamplerState             sampler      NA          NA             s1      1 
// diffuseMap                        texture  float4          2d             t0      1 
// normalMap                         texture  float4          2d             t1      1 
// shadowMap                         texture  float4          2d             t2      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbShadowmap                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float   x  w
// TEXCOORD                 1   xyz         7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[66], dynamicIndexed
dcl_constantbuffer CB3[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xw
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 13
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s0
mul r1.xw, r0.xxxw, v6.xxxw
mul r1.yz, r0.yyzy, cb0[64].zzwz
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v5.xyxx, t1.xyzw, s0
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, v2.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r0.yyyy
mad r0.xyw, r0.xxxx, r2.xyxz, r3.xyxz
mad r0.xyz, r0.zzzz, r4.xyzx, r0.xywx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, cb0[6].xyzx, cb0[6].xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, cb0[6].xyzx
add r3.xyz, -v1.xyzx, cb0[0].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r2.w, r0.w
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r2.w, -r2.xyzx, r0.xyzx
max r2.w, r2.w, l(0.000000)
mul r2.w, r2.w, cb0[7].x
mul r4.xyz, r2.wwww, cb0[7].xyzx
dp3 r2.w, r2.xyzx, r0.xyzx
add r2.w, r2.w, r2.w
mad r5.xyz, r0.xyzx, -r2.wwww, r2.xyzx
dp3 r2.w, r5.xyzx, r3.xyzx
max r2.w, r2.w, l(0.000000)
log r2.w, r2.w
mul r2.w, r2.w, l(128.000000)
exp r2.w, r2.w
mul r5.xyz, r2.wwww, cb0[7].xyzx
resinfo_indexable(texture2d)(float,float,float,float)_uint r6.xy, l(0), t2.xyzw
utof r6.xy, r6.xyxx
div r6.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r6.xyxx
mov r2.w, l(0)
mov r3.w, l(-2)
loop 
  ilt r4.w, l(2), r3.w
  breakc_nz r4.w
  itof r7.x, r3.w
  mov r4.w, r2.w
  mov r5.w, l(-2)
  loop 
    ilt r6.z, l(2), r5.w
    breakc_nz r6.z
    itof r7.y, r5.w
    mad r6.zw, r6.xxxy, r7.xxxy, v7.xxxy
    sample_indexable(texture2d)(float,float,float,float) r6.z, r6.zwzz, t2.yzxw, s1
    add r6.z, -r6.z, v7.z
    ge r6.z, cb3[4].w, r6.z
    and r6.z, r6.z, l(0x3f800000)
    add r4.w, r4.w, r6.z
    iadd r5.w, r5.w, l(1)
  endloop 
  mov r2.w, r4.w
  iadd r3.w, r3.w, l(1)
endloop 
mul r2.w, r2.w, l(0.040000)
add r6.xyz, -cb3[4].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r6.xyz, r2.wwww, r6.xyzx, cb3[4].xyzx
mov r7.xyz, l(0,0,0,0)
mov r8.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.w, r2.w, cb0[64].x
  breakc_nz r3.w
  imul null, r3.w, r2.w, l(3)
  add r9.xyz, v1.xyzx, -cb0[r3.w + 8].xyzx
  dp3 r4.w, r9.xyzx, r9.xyzx
  sqrt r4.w, r4.w
  lt r5.w, cb0[r3.w + 10].x, r4.w
  if_nz r5.w
    iadd r5.w, r2.w, l(1)
    mov r2.w, r5.w
    continue 
  endif 
  div r5.w, r4.w, cb0[r3.w + 10].x
  add_sat r5.w, -r5.w, l(1.000000)
  div r9.xyz, r9.xyzx, r4.wwww
  dp3 r4.w, -r9.xyzx, r0.xyzx
  max r4.w, r4.w, l(0.000000)
  mul r4.w, r4.w, cb0[r3.w + 9].x
  mul r10.xyz, r4.wwww, cb0[r3.w + 9].xyzx
  mad r7.xyz, r10.xyzx, r5.wwww, r7.xyzx
  dp3 r4.w, r9.xyzx, r0.xyzx
  add r4.w, r4.w, r4.w
  mad r9.xyz, r0.xyzx, -r4.wwww, r9.xyzx
  dp3 r4.w, r9.xyzx, r3.xyzx
  max r4.w, r4.w, l(0.000000)
  log r4.w, r4.w
  mul r4.w, r4.w, l(128.000000)
  exp r4.w, r4.w
  mul r9.xyz, r4.wwww, cb0[r3.w + 9].xyzx
  mad r8.xyz, r9.xyzx, r5.wwww, r8.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
mov r9.xyz, l(0,0,0,0)
mov r10.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.w, r2.w, cb0[64].y
  breakc_nz r3.w
  ishl r3.w, r2.w, l(2)
  add r11.xyz, v1.xyzx, -cb0[r3.w + 32].xyzx
  dp3 r4.w, r11.xyzx, r11.xyzx
  sqrt r5.w, r4.w
  lt r6.w, cb0[r3.w + 35].x, r5.w
  if_nz r6.w
    iadd r6.w, r2.w, l(1)
    mov r2.w, r6.w
    continue 
  endif 
  div r5.w, r5.w, cb0[r3.w + 35].x
  add_sat r5.w, -r5.w, l(1.000000)
  rsq r4.w, r4.w
  mul r11.xyz, r4.wwww, r11.xyzx
  dp3 r4.w, cb0[r3.w + 33].xyzx, cb0[r3.w + 33].xyzx
  rsq r4.w, r4.w
  mul r12.xyz, r4.wwww, cb0[r3.w + 33].xyzx
  dp3 r4.w, r12.xyzx, r11.xyzx
  add r6.w, -cb0[r3.w + 35].z, cb0[r3.w + 35].y
  add r4.w, -r4.w, cb0[r3.w + 35].y
  div r4.w, r4.w, r6.w
  add_sat r4.w, -r4.w, l(1.000000)
  mul r4.w, r4.w, r5.w
  dp3 r5.w, -r11.xyzx, r0.xyzx
  max r5.w, r5.w, l(0.000000)
  mul r5.w, r5.w, cb0[r3.w + 34].x
  mul r12.xyz, r5.wwww, cb0[r3.w + 34].xyzx
  mad r9.xyz, r12.xyzx, r4.wwww, r9.xyzx
  dp3 r5.w, r11.xyzx, r0.xyzx
  add r5.w, r5.w, r5.w
  mad r11.xyz, r0.xyzx, -r5.wwww, r11.xyzx
  dp3 r5.w, r11.xyzx, r3.xyzx
  max r5.w, r5.w, l(0.000000)
  log r5.w, r5.w
  mul r5.w, r5.w, l(128.000000)
  exp r5.w, r5.w
  mul r11.xyz, r5.wwww, cb0[r3.w + 34].xyzx
  mad r10.xyz, r11.xyzx, r4.wwww, r10.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
mad r4.xyz, r4.xyzx, r6.xyzx, r7.xyzx
add r4.xyz, r9.xyzx, r4.xyzx
mad r1.xyz, r1.xyzx, r4.xyzx, cb0[5].xyzx
ieq r2.w, cb0[65].y, l(1)
mad r4.xyz, r5.xyzx, r6.xyzx, r8.xyzx
add r4.xyz, r10.xyzx, r4.xyzx
add r4.xyz, r1.xyzx, r4.xyzx
movc r1.xyz, r2.wwww, r4.xyzx, r1.xyzx
dp3_sat r0.x, r3.xyzx, r0.xyzx
add r0.x, -r0.x, l(1.000000)
mul r0.y, r0.x, r0.x
mul r0.x, r0.y, r0.x
mul r0.xyz, r0.xxxx, cb0[7].xyzx
dp3_sat r2.x, r3.xyzx, r2.xyzx
mad r0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
movc r0.xyz, cb0[65].zzzz, r0.xyzx, r1.xyzx
sqrt r0.w, r0.w
add r0.w, r0.w, l(-1.000000)
mul_sat r0.w, r0.w, l(0.006711)
add r1.x, -r0.w, l(1.000000)
mul r0.w, r0.w, l(0.100000)
mad o0.xyz, r0.xyzx, r1.xxxx, r0.wwww
mov o0.w, r1.w
ret 
// Approximately 175 instruction slots used
