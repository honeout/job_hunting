//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBColorGrading
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler0                          sampler      NA          NA             s0      1 
// texture0                          texture  float4          2d             t0      1 
// CBColorGrading                    cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 12 "C:\Users\2220261\Desktop\2年時前期\E年\個人製作\project\job_hunting\HLSL\ColorGradingPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v1.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 14
nop 
mov r0.xyz, r0.xyzx

#line 8 "C:\Users\2220261\Desktop\2年時前期\３年\個人製作\project\job_hunting\HLSL\FilterFunctions.hlsli"
itof r1.x, l(0)  // r1.x <- hsv.x

#line 10
max r1.w, r0.z, r0.y
max r1.z, r0.x, r1.w  // r1.z <- Vmax

#line 11
min r1.w, r0.z, r0.y
min r1.w, r0.x, r1.w  // r1.w <- Vmin

#line 14
mov r1.w, -r1.w
add r1.w, r1.w, r1.z  // r1.w <- delta

#line 18
mov r1.z, r1.z  // r1.z <- hsv.z

#line 21
div r1.y, r1.w, r1.z  // r1.y <- hsv.y

#line 24
lt r2.x, l(0.000000), r1.y
if_nz r2.x

#line 27
  eq r2.x, r0.x, r1.z
  if_nz r2.x

#line 31
    itof r2.x, l(60)
    mov r2.y, -r0.z
    add r2.y, r0.y, r2.y
    div r2.y, r2.y, r1.w
    mul r1.x, r2.y, r2.x

#line 33
  endif 

#line 35
  eq r2.x, r0.y, r1.z
  if_nz r2.x

#line 38
    itof r2.x, l(60)
    mov r2.y, -r0.x
    add r2.y, r0.z, r2.y
    div r2.y, r2.y, r1.w
    mul r2.x, r2.y, r2.x
    itof r2.y, l(120)
    add r1.x, r2.y, r2.x

#line 40
  endif 

#line 42
  eq r0.z, r0.z, r1.z
  if_nz r0.z

#line 45
    itof r0.z, l(60)
    mov r0.y, -r0.y
    add r0.x, r0.y, r0.x
    div r0.x, r0.x, r1.w
    mul r0.x, r0.x, r0.z
    itof r0.y, l(240)
    add r1.x, r0.y, r0.x

#line 47
  endif 

#line 49
  itof r0.x, l(0)
  lt r0.x, r1.x, r0.x
  if_nz r0.x

#line 51
    itof r0.x, l(360)
    add r1.x, r0.x, r1.x

#line 52
  endif 

#line 53
endif 

#line 54
mov r1.x, r1.x  // r1.x <- <RGB2HSV return value>.x
mov r1.y, r1.y  // r1.y <- <RGB2HSV return value>.y
mov r1.z, r1.z  // r1.z <- <RGB2HSV return value>.z

#line 14 "C:\Users\2220261\Desktop\2年時前期\E年\個人製作\project\job_hunting\HLSL\ColorGradingPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 16
add r0.x, r1.x, cb0[0].x  // r0.x <- color.x

#line 19
mul r0.y, r1.y, cb0[0].y  // r0.y <- color.y

#line 21
mul r0.z, r1.z, cb0[0].z  // r0.z <- color.z

#line 24
nop 
mov r0.x, r0.x
mov r0.y, r0.y
mov r0.z, r0.z

#line 64 "C:\Users\2220261\Desktop\2年時前期\３年\個人製作\project\job_hunting\HLSL\FilterFunctions.hlsli"
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- rgb.x; r1.y <- rgb.y; r1.z <- rgb.z

#line 65
itof r1.w, l(0)
eq r1.w, r0.y, r1.w
if_nz r1.w

#line 68
  mov r1.z, r0.z
  mov r1.y, r1.z
  mov r1.x, r1.y

#line 69
else 

#line 74
  mov r0.z, r0.z  // r0.z <- Vmax

#line 76
  itof r1.w, l(360)
  mul r2.x, r0.x, r1.w
  mov r2.y, -r2.x
  ge r2.x, r2.x, r2.y
  mov r2.y, -r1.w
  movc r1.w, r2.x, r1.w, r2.y
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul r0.x, r0.x, r2.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r1.w  // r0.x <- hsv.x

#line 77
  itof r1.w, l(60)
  div r1.w, r0.x, r1.w
  ftoi r1.w, r1.w
  itof r1.w, r1.w  // r1.w <- Huei

#line 78
  itof r2.x, l(60)
  div r0.x, r0.x, r2.x
  mov r2.x, -r1.w
  add r0.x, r0.x, r2.x  // r0.x <- Huef

#line 79
  mov r2.x, -r0.y
  add r2.x, r2.x, l(1.000000)
  mul r2.x, r0.z, r2.x  // r2.x <- p

#line 80
  mul r2.y, r0.x, r0.y
  mov r2.y, -r2.y
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r0.z, r2.y  // r2.y <- q

#line 81
  mov r0.x, -r0.x
  add r0.x, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.y
  mov r0.x, -r0.x
  add r0.x, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.z  // r0.x <- t

#line 82
  itof r0.y, l(0)
  eq r0.y, r0.y, r1.w
  if_nz r0.y

#line 84
    mov r1.x, r0.z

#line 85
    mov r1.y, r0.x

#line 86
    mov r1.z, r2.x

#line 87
  else 

#line 88
    itof r0.y, l(1)
    eq r0.y, r0.y, r1.w
    if_nz r0.y

#line 90
      mov r1.x, r2.y

#line 91
      mov r1.y, r0.z

#line 92
      mov r1.z, r2.x

#line 93
    else 

#line 94
      itof r0.y, l(2)
      eq r0.y, r0.y, r1.w
      if_nz r0.y

#line 96
        mov r1.x, r2.x

#line 97
        mov r1.y, r0.z

#line 98
        mov r1.z, r0.x

#line 99
      else 

#line 100
        itof r0.y, l(3)
        eq r0.y, r0.y, r1.w
        if_nz r0.y

#line 102
          mov r1.x, r2.x

#line 103
          mov r1.y, r2.y

#line 104
          mov r1.z, r0.z

#line 106
        else 

#line 107
          itof r0.y, l(4)
          eq r0.y, r0.y, r1.w
          if_nz r0.y

#line 109
            mov r1.x, r0.x

#line 110
            mov r1.y, r2.x

#line 111
            mov r1.z, r0.z

#line 112
          else 

#line 113
            itof r0.x, l(5)
            eq r0.x, r0.x, r1.w
            if_nz r0.x

#line 115
              mov r1.x, r0.z

#line 116
              mov r1.y, r2.x

#line 117
              mov r1.z, r2.y

#line 118
            endif 
          endif 
        endif 
      endif 
    endif 
  endif 

#line 120
endif 

#line 121
mov r1.xyz, r1.xyzx  // r1.x <- <HSV2RGB return value>.x; r1.y <- <HSV2RGB return value>.y; r1.z <- <HSV2RGB return value>.z

#line 24 "C:\Users\2220261\Desktop\2年時前期\E年\個人製作\project\job_hunting\HLSL\ColorGradingPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 26
mov o0.xyz, r1.xyzx
mov o0.w, r0.w
ret 
// Approximately 154 instruction slots used
