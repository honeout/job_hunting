#include <imgui.h>
#include "EnemyManager.h"
#include "Collision.h"




// 更新処理
void EnemyManager::Update(float elapsedTime)
{
    for (Enemy* enemy :  enemies)
    {
        enemy->Update(elapsedTime);
    }

   
    // 破棄処理 毎フレームここで一気に消す。
    for (Enemy* enemy : removes)
    {
        std::vector<Enemy*>::iterator it = std::find(enemies.begin(), enemies.end(),
                                                                              enemy);//vectorからenemy探して出す
        if (it != enemies.end())// 見つかったら
        {
            enemies.erase(it);
        }

        // 消えた訳じゃないので
        delete enemy;// 入れ物破棄

    }
    // 破棄リストをクリア
    removes.clear();

    // 敵同士の衝突処理
    CollisiionEnemyVsEnemies();
}

void EnemyManager::DrawDebugPrimitive()
{
    // 全ての奴をやってくれ
    for (Enemy* enemy : enemies)
    {
        enemy->DrawDebugPrimitive();
    }
}


// 描画処理
void EnemyManager::Render(const RenderContext& rc, ModelShader* shader)
{
    for (Enemy* enemy : enemies)
    {
        enemy->Render(rc, shader);
    }
}

void EnemyManager::Remove(Enemy* enemy)
{
    removes.insert(enemy);
}




void EnemyManager::Register(Enemy* enemy)
{
    // 作ったら後ろから追加していく増えていくだけ
    enemies.emplace_back(enemy);
}

void EnemyManager::CollisiionEnemyVsEnemies()
{
    // 最大数
    size_t enemyCount = enemies.size();
    for (int i = 0; i < enemyCount; ++i) {
        // i番目の位置
        Enemy* enemyA = enemies.at(i);
        for (int j = i + 1; j < enemyCount; ++j)
            {
            Enemy * enemyB = enemies.at(j);
            DirectX::XMFLOAT3 outPosition;
            if (Collision::IntersectSpherVsSphere(
                enemyA->GetPosition(),
                enemyA->GetRadius(),
                enemyB->GetPosition(),
                enemyB->GetRadius(),
                outPosition))
            {
                enemyB->SetPosition(outPosition);
            }
            }
            
    }

}



void EnemyManager::DrawDebugGUI()
{
    
    ImGui::SetNextWindowPos(ImVec2(10, 10), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(300, 300), ImGuiCond_FirstUseEver);
    if (ImGui::Begin("Player", nullptr, ImGuiWindowFlags_None))
    {
        // トランスフォーム
        if (ImGui::CollapsingHeader("Enemy", ImGuiTreeNodeFlags_DefaultOpen))
        {
            ImGui::Button("Add");
        }
    }
    ImGui::End();
}

// エネミー全削除
void EnemyManager::Clear()
{
    for (Enemy* enemy : enemies)// 
    {
        // 実体を消した管理している数はそのまま
        delete enemy;

    }
    // vectorの数を０に
    enemies.clear();
}
